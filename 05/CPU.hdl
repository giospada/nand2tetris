// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    //Instruction Pointer
    //is a A-isntruction
    Not(in=instruction[15], out=isAinstruction);
    Not(in=isAinstruction, out=isCinstruction);
    And(a=isAinstruction, b=isCinstruction,out=true);
    //check if is a jump the first 16 is true and the first three are false
    Or(a=instruction[0], b=instruction[1], out=jtmp);
    Or(a=instruction[2], b=jtmp, out=tmpJMP);
    Not(in=tmpJMP, out=tmp2JMP);
    And(a=isCinstruction, b=tmp2JMP, out=cisJMP);
    //check if is a A instruction
    Or(a=cisJMP, b=isAinstruction, out=isJMP);

    //check if Write On register
    And(a=isCinstruction, b=instruction[3], out=writeM);
    And(a=isCinstruction, b=instruction[4], out=writeDR);
    And(a=isCinstruction, b=instruction[5], out=writeAR);

    //positive
    Not(in=isZero, out=notZero);
    Not(in=isNeg, out=notNeg);
    And(a=notZero, b=notNeg, out=isPositive);

    //((j1 and isNeg)or (j2 and isZero)or (j3 and isPositive)) and isCinstruction
    And(a=instruction[2], b=isNeg, out=tj1);
    And(a=instruction[1], b=isZero, out=tj2);
    And(a=instruction[0], b=isPositive, out=tj3);
    Or(a=tj1, b=tj2, out=tj1j2);
    Or(a=tj1j2, b=tj3, out=tj1j2j3);
    And(a=tj1j2j3, b=isCinstruction, out=isLoad);


    //A Register MUX
    Mux16(a=instruction, b=outALU, sel=writeAR, out=toAR);
    //check if is loading A
    Or(a=isAinstruction, b=writeAR, out=loadA);
    //A-instruction TODO check in A input
    ARegister(in=toAR, load=loadA, out=outA,out[0..14]=addressM);
    // Program Counter 
    PC(in=outA, load=isLoad, inc=true, reset=reset, out[0..14]=pc);

    //DRegister
    DRegister(in=outALU, load=writeDR, out=outDR);
    //set A or M

    Mux16(a=outA, b=inM, sel=instruction[12], out=outMUXAM);

    ALU(x=outDR, y=outMUXAM, zx=instruction[11], nx=instruction[10],
     zy=instruction[9], ny=instruction[8], f=instruction[7],
      no=instruction[6], out=outM, out=outALU, zr=isZero, ng=isNeg);


}